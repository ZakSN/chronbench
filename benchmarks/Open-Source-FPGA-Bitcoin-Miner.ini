[Open-Source-FPGA-Bitcoin-Miner]
url = https://github.com/progranism/Open-Source-FPGA-Bitcoin-Miner.git
start = fd76bc932ae04be2b27be769871105c4678af9dc
depth = 8
branch = master
top = fpgaminer_top
fileset =
	src/sha-256-functions.v
	src/sha256_transform.v
	src/fpgaminer_top.v
# This is very ugly, but does something simple. The FPGA miner uses an altera
# PLL and an altera Probe component. These modules are vendor and device
# specific. Instead we have the tools write null versions of these components
# (equivalent to if SIM was defined).
vivado-extra-commands =
	set fp [open "src/main_pll.v" w]
	puts $fp "module main_pll (inclk0, c0);
		input inclk0;
		output c0;
		assign c0 = inclk0;
	endmodule"
	close $fp
	set fp [open "src/virtual_wire.v" w]
	puts $fp "module virtual_wire (probe, source);
		parameter WIDTH = 1;
		parameter PROBE_WIDTH = 1;
		parameter INITIAL_VALUE = \" 0\";
		parameter INSTANCE_ID = \"NONE\";
		input	[0:PROBE_WIDTH-1]  probe;
		output	[0:WIDTH-1]  source;
		assign source = 0;
	endmodule"
	close $fp
quartus-extra-commands =
	set fp [open "src/main_pll.v" w]
	puts $fp "module main_pll (inclk0, c0);
		input inclk0;
		output c0;
		assign c0 = inclk0;
	endmodule"
	close $fp
	set fp [open "src/virtual_wire.v" w]
	puts $fp "module virtual_wire (probe, source);
		parameter WIDTH = 1;
		parameter PROBE_WIDTH = 1;
		parameter INITIAL_VALUE = \" 0\";
		parameter INSTANCE_ID = \"NONE\";
		input	\[0:PROBE_WIDTH-1]  probe;
		output	\[0:WIDTH-1]  source;
		assign source = 0;
	endmodule"
	close $fp
